org: bitcliff
app: coupon-app
service: coupon-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true
    iamRoleStatements:         # Permissions here or under every function to trace
      - Effect: 'Allow'        # xray tracing permissions
        Action:
          - 'xray:PutTraceSegments'             # Trace Segments
          - 'xray:PutTelemetryRecords'          # Telemetry
        Resource:
          - '*'

  # Use these variables in the functions and resouorces section below. For example, 
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    COUPONS_TABLE: Coupons-${self:provider.stage}
    COUPONS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: coupon-images-819401168130-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  logs:
    # Enable API Gateway logs
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Coupon API
        description: Serverless application for managing Coupons
    models:
      - name: CreateCouponModel
        contentType: application/json
        schema: ${file(models/create-coupon-model.json)}
      - name: UpdateCouponModel
        contentType: application/json
        schema: ${file(models/update-coupon-model.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler


  # Provide iamRoleStatements property for performing Actions on DynamoDB
  GetCoupons:
    handler: src/lambda/http/getCoupons.handler
    events:
      - http:
          method: get
          path: coupons
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: !GetAtt CouponsTable.Arn


  # Provide iamRoleStatements property. Decide the Actions and AWS Resource. 
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below. 
  CreateCoupon:
    handler: src/lambda/http/createCoupon.handler
    events:
      - http:
          method: post
          path: coupons
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new coupon
            description: Create a new coupon
            requestModels:
              'application/json': CreateCouponModel
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: !GetAtt CouponsTable.Arn


  # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
  UpdateCoupon:
    handler: src/lambda/http/updateCoupon.handler
    events:
      - http:
          method: patch
          path: coupons/{couponId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update an existing coupon
            description: Update an existing coupon
            requestModels:
              'application/json': UpdateCouponModel
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource: !GetAtt CouponsTable.Arn


  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  DeleteCoupon:
    handler: src/lambda/http/deleteCoupon.handler
    events:
      - http:
          method: delete
          path: coupons/{couponId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
      Resource: !GetAtt CouponsTable.Arn


  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: coupons/{couponId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource: !GetAtt CouponsTable.Arn

resources:
  Resources:
    # Add necessary AWS resources. You will need at least the following AWS resources
    # Feel free to change the names as you like. 
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    CouponsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: couponId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: couponId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.COUPONS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.COUPONS_CREATED_AT_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index


    # Do not forget to add the CorsConfiguration propoerty
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000


    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: CouponBucketPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    # For validating requests
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false